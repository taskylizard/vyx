networks:
  vyx:

volumes:
  postgres-data:
  dragonfly-data:
  influx-data:
  grafana-data:

services:
  bot:
    build: .
    env_file:
      - .env.prod
    networks:
      - vyx
    restart: unless-stopped
    tty: true
    logging:
      options:
        max-size: "1g"
        max-file: "3"
    container_name: vyx
    volumes:
      - "./state/downloads/:/app/state/downloads/"
    depends_on:
      postgres:
        condition: service_healthy
      lavalink:
        condition: service_started
      dragonfly:
        condition: service_healthy
      influx:
        condition: service_healthy
      grafana:
        condition: service_healthy

  postgres:
    container_name: postgres-vyx
    networks:
      - vyx
    image: postgres:15-alpine
    ports:
      - "5435:5432"
    env_file:
      - .env.prod
    restart: always
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    logging:
      options:
        max-size: "20m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  lavalink:
    image: ghcr.io/lavalink-devs/lavalink:4
    container_name: lavalink-vyx
    restart: unless-stopped
    environment:
      - _JAVA_OPTIONS=-Xmx6G
      - SERVER_PORT=2333
      - LAVALINK_SERVER_PASSWORD=youshallnotpass
    volumes:
      - ./docker/lavalink/application.yml:/opt/Lavalink/application.yml
      - ./docker/lavalink/plugins/:/opt/Lavalink/plugins/
    networks:
      - vyx
    expose:
      - 2333
    ports:
      - "2333:2333"

  dragonfly:
    container_name: dragonfly-vyx
    image: "docker.dragonflydb.io/dragonflydb/dragonfly"
    networks:
      - vyx
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    command: ["--cluster_mode=emulated", "--lock_on_hashtags"]
    volumes:
      - dragonfly-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 30s

  influx:
    container_name: influx-vyx
    image: "influxdb:2.7-alpine"
    networks:
      - vyx
    ports:
      - "8285:8086"
    env_file:
      - .env.prod
    command:
      "influxd run --bolt-path /var/lib/influxdb2/influxd.bolt --engine-path
      /var/lib/influxdb2/engine --store bolt"
    restart: always
    volumes:
      - "influx-data:/var/lib/influxdb2"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    logging:
      options:
        max-size: "10m"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8086/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-vyx
    networks:
      - vyx
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    container_name: grafana-vyx
    image: grafana/grafana:latest
    networks:
      - vyx
    env_file:
      - .env.prod
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/:/etc/grafana/provisioning/
    restart: always
    depends_on:
      - influx
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  renderer:
    container_name: grafana-image-renderer-vyx
    image: grafana/grafana-image-renderer:latest
    networks:
      - vyx
    environment:
      ENABLE_METRICS: "true"

  searxng:
    container_name: searxng-vyx
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    networks:
      - vyx
    ports:
      - "127.0.0.1:8765:8080"
    volumes:
      - ./docker/searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  chroma:
    container_name: chroma-vyx
    image: ghcr.io/chroma-core/chroma:latest
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=False
    volumes:
      - ./docker/chroma:/chroma/chroma/
    ports:
      - 8087:8000
    networks:
      - vyx
